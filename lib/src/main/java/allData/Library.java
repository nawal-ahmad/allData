/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package allData;

import allData.structure.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
//        LinkedListTest();
//        StackTest();
//        QueueTest();
//        GenericQueueTest();
//        pseudo();
//        IntStackMax();
//        String input = "ABCD EFG";
//        String output =Implement.reverseString(input);
//        System.out.println(output);
//        String brackets = "Ah{(Ma)}";
//        boolean res = Implement.isBalanced(brackets);
//        System.out.println(res);

    }

    public static void LinkedListTest() {
        LinkedList ll = new LinkedList();
        LinkedList ll2 = new LinkedList();

        ll.insert("M");
        ll.add("N");
        ll.add("A");
        ll.add("W");
        ll.add("W");
        ll.insertBefore(2, "Z");
        ll.add("A");
        ll.add("L");
        ll.insertAfter(3, "Y");
        ll.insert("J");
        ll.printList();
        System.out.println(ll.search("XX"));
        ll.middle(ll);
        System.out.println("middle value => " +ll.middle(ll));

        ll2.printList();
//

    }

    public static void StackTest() {
        Stack stack = new Stack();
        System.out.println(stack.isEmpty());
        stack.push("L");
        stack.push("A");
        stack.push("W");
        stack.push("A");
        stack.push("N");

        System.out.println(stack.isEmpty());
        System.out.println(stack.peek());
//        System.out.println(stack.pop());
        System.out.println(stack.peek());
        System.out.println(stack.searchT("M"));
    }

    public static void QueueTest() {
        Queue queue = new Queue();
        System.out.println(queue.isEmpty());
        queue.enqueue("N");
        System.out.println(queue.isEmpty());
        queue.enqueue("A");
        queue.enqueue("W");
        queue.enqueue("A");
        queue.enqueue("L");

        System.out.println(queue.searchT("L"));
//        System.out.println(queue.peek());
//        System.out.println(queue.dequeue());
//        System.out.println(queue.peek());
//        System.out.println(queue.dequeue());
//        System.out.println(queue.dequeue());
//        System.out.println(queue.dequeue());
//        System.out.println(queue.dequeue());
//        System.out.println(queue.dequeue());
    }

    public static void pseudo() {
        PseudoQueue pseudoQueue = new PseudoQueue();
        pseudoQueue.enqueue("A");
        pseudoQueue.enqueue("B");
        pseudoQueue.enqueue("C");
        pseudoQueue.enqueue("D");

        System.out.println(pseudoQueue.dequeue());
        System.out.println(pseudoQueue.dequeue());
        System.out.println(pseudoQueue.dequeue());
        System.out.println(pseudoQueue.dequeue());
        System.out.println(pseudoQueue.dequeue());
    }

    public static void IntStackMax(){
        StackInt st = new StackInt();
        st.push(10);
        st.push(20);
        st.push(40);
        st.push(50);
        st.push(25);
        st.push(90);
        int max = st.getMax();
//        System.out.println(max);
        int maax = StackInt.getMaxStack(st);
        System.out.println(StackInt.getMaxStack(st));
        System.out.println(StackInt.maximum(st));
    }
}


